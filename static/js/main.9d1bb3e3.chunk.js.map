{"version":3,"sources":["components/DraftEditor/DraftEditor.js","components/RichTextEditor/RichTextEditor.js","App.js","reportWebVitals.js","index.js"],"names":["React","Component","RichTextEditor","props","state","editorState","EditorState","createEmpty","focus","refs","editor","onChange","setState","handleKeyCommand","_handleKeyCommand","bind","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","RichUtils","this","e","keyCode","getDefaultKeyBinding","newEditorState","onTab","blockType","inlineStyle","className","contentState","getCurrentContent","hasText","getBlockMap","first","getType","onToggle","onClick","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","ref","spellCheck","CODE","backgroundColor","fontFamily","fontSize","padding","block","StyleButton","preventDefault","style","active","onMouseDown","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","type","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAIuBA,IAAMC,U,OCCvBC,G,yDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,YAAaC,cAAYC,eAEvC,EAAKC,MAAQ,kBAAM,EAAKC,KAAKC,OAAOF,SACpC,EAAKG,SAAW,SAACN,GAAD,OAAiB,EAAKO,SAAS,CAACP,iBAEhD,EAAKQ,iBAAmB,EAAKC,kBAAkBC,KAAvB,gBACxB,EAAKC,sBAAwB,EAAKC,uBAAuBF,KAA5B,gBAC7B,EAAKG,gBAAkB,EAAKC,iBAAiBJ,KAAtB,gBACvB,EAAKK,kBAAoB,EAAKC,mBAAmBN,KAAxB,gBAVR,E,qDAanB,SAAkBO,EAASjB,GACzB,IAAMkB,EAAWC,YAAUX,iBAAiBR,EAAaiB,GACzD,QAAIC,IACFE,KAAKd,SAASY,IACP,K,oCAKX,SAAuBG,GACrB,GAAkB,IAAdA,EAAEC,QAWN,OAAOC,+BAAqBF,GAV1B,IAAMG,EAAiBL,YAAUM,MAC/BJ,EACAD,KAAKrB,MAAMC,YACX,GAEEwB,IAAmBJ,KAAKrB,MAAMC,aAChCoB,KAAKd,SAASkB,K,8BAOpB,SAAiBE,GACfN,KAAKd,SACHa,YAAUN,gBACRO,KAAKrB,MAAMC,YACX0B,M,gCAKN,SAAmBC,GACjBP,KAAKd,SACHa,YAAUJ,kBACRK,KAAKrB,MAAMC,YACX2B,M,oBAKN,WACE,IAAO3B,EAAeoB,KAAKrB,MAApBC,YAIH4B,EAAY,oBACZC,EAAe7B,EAAY8B,oBAO/B,OANKD,EAAaE,WACqC,aAAjDF,EAAaG,cAAcC,QAAQC,YACrCN,GAAa,+BAKf,qCACE,sBAAKA,UAAU,sBAAf,UACE,cAAC,EAAD,CACE5B,YAAaA,EACbmC,SAAUf,KAAKP,kBAEjB,cAAC,EAAD,CACEb,YAAaA,EACbmC,SAAUf,KAAKL,uBAGnB,qBAAKa,UAAWA,EAAWQ,QAAShB,KAAKjB,MAAzC,SACE,cAAC,SAAD,CACEkC,aAAcC,EACdC,eAAgBC,EAChBxC,YAAaA,EACbQ,iBAAkBY,KAAKZ,iBACvBiC,aAAcrB,KAAKT,sBACnBL,SAAUc,KAAKd,SACfoC,YAAY,kBACZC,IAAI,SACJC,YAAY,a,GA3FKjD,IAAMC,YAoG7B4C,EAAW,CACfK,KAAM,CACJC,gBAAiB,sBACjBC,WAAY,gDACZC,SAAU,GACVC,QAAS,IAIb,SAASX,EAAcY,GACrB,OAAQA,EAAMhB,WACZ,IAAK,aAAc,MAAO,wBAC1B,QAAS,OAAO,M,IAIdiB,E,kDACJ,aAAe,IAAD,8BACZ,gBACKhB,SAAW,SAACd,GACfA,EAAE+B,iBACF,EAAKtD,MAAMqC,SAAS,EAAKrC,MAAMuD,QAJrB,E,0CAQd,WACE,IAAIzB,EAAY,yBAKhB,OAJIR,KAAKtB,MAAMwD,SACb1B,GAAa,4BAIb,sBAAMA,UAAWA,EAAW2B,YAAanC,KAAKe,SAA9C,SACGf,KAAKtB,MAAM0D,Y,GAjBM7D,IAAMC,WAuB1B6D,EAAc,CAOlB,CAACD,MAAO,aAAcH,MAAO,cAC7B,CAACG,MAAO,KAAMH,MAAO,uBACrB,CAACG,MAAO,KAAMH,MAAO,qBACrB,CAACG,MAAO,aAAcH,MAAO,eAGzBK,EAAqB,SAAC5D,GAC1B,IAAOE,EAAeF,EAAfE,YACD2D,EAAY3D,EAAY4D,eACxBlC,EAAY1B,EACf8B,oBACA+B,eAAeF,EAAUG,eACzB5B,UAEH,OACE,mCACGuB,EAAYM,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAEEV,OAAQU,EAAKX,QAAU3B,EACvB8B,MAAOQ,EAAKR,MACZrB,SAAUrC,EAAMqC,SAChBkB,MAAOW,EAAKX,OAJPW,EAAKR,aAWhBS,EAAgB,CAClB,CAACT,MAAO,OAAQH,MAAO,QACvB,CAACG,MAAO,SAAUH,MAAO,UACzB,CAACG,MAAO,YAAaH,MAAO,aAC5B,CAACG,MAAO,YAAaH,MAAO,SAGxBa,EAAsB,SAACpE,GAC3B,IAAMqE,EAAerE,EAAME,YAAYoE,wBAEvC,OACE,mCACGH,EAAcF,KAAI,SAACC,GAAD,OACjB,cAAC,EAAD,CAEEV,OAAQa,EAAaE,IAAIL,EAAKX,OAC9BG,MAAOQ,EAAKR,MACZrB,SAAUrC,EAAMqC,SAChBkB,MAAOW,EAAKX,OAJPW,EAAKR,aAWL3D,IClMAyE,MAPf,WACE,OAEE,aADA,CACC,EAAD,KCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.9d1bb3e3.chunk.js","sourcesContent":["import React from 'react';\nimport {Editor, EditorState, RichUtils} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nclass MyEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = editorState => this.setState({editorState});\n  }\n\n  _onBoldClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'BOLD'));\n  }\n\n  _onItalicClick() {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'ITALIC'));\n  }\n\n  render() {\n    return (\n      <>\n        <div className='toolbar'>\n          <button className='button-square' onClick={this._onBoldClick.bind(this)}>Bold</button>\n          <button className='button-square' onClick={this._onItalicClick.bind(this)}>Italic</button>\n        </div>\n        <Editor\n          editorState={this.state.editorState}\n          handleKeyCommand={this.handleKeyCommand}\n          onChange={this.onChange}\n        /> \n      </>\n    );\n  }\n}\n\nexport default MyEditor;","import React from \"react\";\nimport { Editor, EditorState, getDefaultKeyBinding, RichUtils } from \"draft-js\";\nimport './RichTextEditor.css';\nimport '../../../node_modules/draft-js/dist/Draft.css';\n\nclass RichTextEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n\n    this.focus = () => this.refs.editor.focus();\n    this.onChange = (editorState) => this.setState({editorState});\n\n    this.handleKeyCommand = this._handleKeyCommand.bind(this);\n    this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\n    this.toggleBlockType = this._toggleBlockType.bind(this);\n    this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n  }\n\n  _handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  }\n\n  _mapKeyToEditorCommand(e) {\n    if (e.keyCode === 9 /* TAB */) {\n      const newEditorState = RichUtils.onTab(\n        e,\n        this.state.editorState,\n        4, /* maxDepth */\n      );\n      if (newEditorState !== this.state.editorState) {\n        this.onChange(newEditorState);\n      }\n      return;\n    }\n    return getDefaultKeyBinding(e);\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(\n      RichUtils.toggleBlockType(\n        this.state.editorState,\n        blockType\n      )\n    );\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(\n      RichUtils.toggleInlineStyle(\n        this.state.editorState,\n        inlineStyle\n      )\n    );\n  }\n\n  render() {\n    const {editorState} = this.state;\n\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = 'RichEditor-editor';\n    var contentState = editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    return (\n      <>\n        <div className=\"RichEditor-controls\">\n          <BlockStyleControls\n            editorState={editorState}\n            onToggle={this.toggleBlockType}\n          />\n          <InlineStyleControls\n            editorState={editorState}\n            onToggle={this.toggleInlineStyle}\n          />\n        </div>\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            customStyleMap={styleMap}\n            editorState={editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            keyBindingFn={this.mapKeyToEditorCommand}\n            onChange={this.onChange}\n            placeholder=\"Tell a story...\"\n            ref=\"editor\"\n            spellCheck={true}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote': return 'RichEditor-blockquote';\n    default: return null;\n  }\n}\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n    this.onToggle = (e) => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = 'RichEditor-styleButton';\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return (\n      <span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n    );\n  }\n}\n\nconst BLOCK_TYPES = [\n  // {label: 'H1', style: 'header-one'},\n  // {label: 'H2', style: 'header-two'},\n  // {label: 'H3', style: 'header-three'},\n  // {label: 'H4', style: 'header-four'},\n  // {label: 'H5', style: 'header-five'},\n  // {label: 'H6', style: 'header-six'},\n  {label: 'Blockquote', style: 'blockquote'},\n  {label: 'UL', style: 'unordered-list-item'},\n  {label: 'OL', style: 'ordered-list-item'},\n  {label: 'Code Block', style: 'code-block'},\n];\n\nconst BlockStyleControls = (props) => {\n  const {editorState} = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n    <>\n      {BLOCK_TYPES.map((type) =>\n        <StyleButton\n          key={type.label}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      )}\n    </>\n  );\n};\n\nvar INLINE_STYLES = [\n  {label: 'Bold', style: 'BOLD'},\n  {label: 'Italic', style: 'ITALIC'},\n  {label: 'Underline', style: 'UNDERLINE'},\n  {label: 'Monospace', style: 'CODE'},\n];\n\nconst InlineStyleControls = (props) => {\n  const currentStyle = props.editorState.getCurrentInlineStyle();\n  \n  return (\n    <>\n      {INLINE_STYLES.map((type) =>\n        <StyleButton\n          key={type.label}\n          active={currentStyle.has(type.style)}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />\n      )}\n    </>\n  );\n};\n\nexport default RichTextEditor;","import './App.css';\nimport MyEditor from './components/DraftEditor/DraftEditor';\nimport RichTextEditor from './components/RichTextEditor/RichTextEditor';\n\nfunction App() {\n  return (\n    // <MyEditor />\n    <RichTextEditor />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}